#pragma once

#include "/Engine/Private/Common.ush"

Texture2D<float4> txState;
Texture2D<float4> txBottom;
Texture2D<float4> txH;
Texture2D<float4> txXFlux;
Texture2D<float4> txYFlux;
Texture2D<float4> oldGradients;
Texture2D<float4> oldOldGradients;
Texture2D<float4> predictedGradients;
Texture2D<float4> F_G_star_oldOldGradients;
Texture2D<float4> txstateUVstar;
Texture2D<float4> txShipPressure;

int width;
int height;
float dt;
float dx;
float dy;
float one_over_dx;
float one_over_dy;
float g_over_dx;
float g_over_dy;
int timeScheme;
float epsilon;
int isManning;
float g;
float friction;
int pred_or_corrector;
float Bcoef;
float Bcoef_g;
float one_over_d2x;
float one_over_d3x;
float one_over_d2y;
float one_over_d3y;
float one_over_dxdy;
float seaLevel;

RWTexture2D<float4> txNewState;
RWTexture2D<float4> dU_by_dt;
RWTexture2D<float4> F_G_star;
RWTexture2D<float4> current_stateUVstar;

float FrictionCalc(float hu, float hv, float h) {
    float h2 = h * h;
    float divide_by_h = 2.0 * h / sqrt(h2 + max(h2, epsilon));

    float f;
    if (isManning == 1) {
        f = g * pow(friction, 2.0) * pow(abs(divide_by_h), 1.0 / 3.0);
    } else {
        f = friction / 2.0;
    }

    f = f * sqrt(hu * hu + hv * hv) * divide_by_h * divide_by_h;
    return f;
}

[numthreads(32, 32, 1)]
void MainCS(uint3 id : SV_DispatchThreadID) {
    int2 idx = int2(id.xy);

    float4 zero = float4(0.0, 0.0, 0.0, 0.0);
    txNewState[id.xy] = zero;
    dU_by_dt[id.xy] = zero;
    F_G_star[id.xy] = zero;
    current_stateUVstar[id.xy] = zero;

    if (idx.x >= width - 2 || idx.y >= height - 2) return;
    if (idx.x <= 1 || idx.y <= 1) return;

    int2 leftIdx = idx + int2(-1, 0);
    int2 rightIdx = idx + int2(1, 0);
    int2 downIdx = idx + int2(0, -1);
    int2 upIdx = idx + int2(0, 1);
    int2 upleftIdx = idx + int2(-1, 1);
    int2 uprightIdx = idx + int2(1, 1);
    int2 downleftIdx = idx + int2(-1, -1);
    int2 downrightIdx = idx + int2(1, -1);

    float B_here = txBottom.Load(int3(idx, 0)).z;

    float4 in_state_here = txState.Load(int3(idx, 0));
    float4 in_state_here_UV = txstateUVstar.Load(int3(idx, 0));

    float B_south = txBottom.Load(int3(downIdx, 0)).z;
    float B_north = txBottom.Load(int3(upIdx, 0)).z;
    float B_west = txBottom.Load(int3(leftIdx, 0)).z;
    float B_east = txBottom.Load(int3(rightIdx, 0)).z;

    float4 h_vec = txH.Load(int3(idx, 0));
    float h_here = in_state_here.x - B_here;

    float eta_west = txState.Load(int3(leftIdx, 0)).x;
    float eta_east = txState.Load(int3(rightIdx, 0)).x;
    float eta_south = txState.Load(int3(downIdx, 0)).x;
    float eta_north = txState.Load(int3(upIdx, 0)).x;

    float detadx = 0.5 * (eta_east - eta_west) * one_over_dx;
    float detady = 0.5 * (eta_north - eta_south) * one_over_dy;

    float minH = min(h_vec.w, min(h_vec.z, min(h_vec.y, h_vec.x)));
    float dB = max(abs(B_south - B_here), max(abs(B_north - B_here), max(abs(B_west - B_here), abs(B_east - B_here))));
    float u_here = in_state_here.y;
    float v_here = in_state_here.z;
    float speed2_here = u_here * u_here + v_here * v_here;
    if (minH * minH < 2.0 * dx * dB && speed2_here < 0.00001 * dB * g) {
        detady = 0;
        detadx = 0;
    }

    float4 xflux_here = txXFlux.Load(int3(idx, 0));
    float4 xflux_west = txXFlux.Load(int3(leftIdx, 0));
    float4 yflux_here = txYFlux.Load(int3(idx, 0));
    float4 yflux_south = txYFlux.Load(int3(downIdx, 0));

    float friction_ = FrictionCalc(in_state_here.y, in_state_here.z, h_here);

    float4 P_here = txShipPressure.Load(int3(idx, 0));
    float P_left = txShipPressure.Load(int3(leftIdx, 0)).x;
    float P_right = txShipPressure.Load(int3(rightIdx, 0)).x;
    float P_down = txShipPressure.Load(int3(downIdx, 0)).x;
    float P_up = txShipPressure.Load(int3(upIdx, 0)).x;

    float press_x = -0.5 * h_here * g_over_dx * (P_right - P_left);
    float press_y = -0.5 * h_here * g_over_dy * (P_up - P_down);

    float C_state_here = txState.Load(int3(idx, 0)).w;
    float C_state_right = txState.Load(int3(rightIdx, 0)).w;
    float C_state_left = txState.Load(int3(leftIdx, 0)).w;
    float C_state_up = txState.Load(int3(upIdx, 0)).w;
    float C_state_down = txState.Load(int3(downIdx, 0)).w;
    float C_state_up_left = txState.Load(int3(upleftIdx, 0)).w;
    float C_state_up_right = txState.Load(int3(uprightIdx, 0)).w;
    float C_state_down_left = txState.Load(int3(downleftIdx, 0)).w;
    float C_state_down_right = txState.Load(int3(downrightIdx, 0)).w;

    float Dxx = 1.;
    float Dxy = 1.;
    float Dyy = 1.;

    float hc_by_dx_dx = Dxx * one_over_d2x * (C_state_right - 2.0f * in_state_here.a + C_state_left);
    float hc_by_dy_dy = Dyy * one_over_d2y * (C_state_up - 2.0f * in_state_here.a + C_state_down);
    float hc_by_dx_dy = 0.25f * Dxy * one_over_dxdy * (C_state_up_right - C_state_up_left - C_state_down_right + C_state_down_left);

    float c_dissipation = -0.1 * C_state_here;

    float4 source_term = float4(0.0, -g * h_here * detadx - in_state_here.y * friction_ + press_x, -g * h_here * detady - in_state_here.z * friction_ + press_y, hc_by_dx_dx + hc_by_dy_dy + 2.0f * hc_by_dx_dy + c_dissipation);

    float4 d_by_dt = (xflux_west - xflux_here) * one_over_dx + (yflux_south - yflux_here) * one_over_dy + source_term;

    float4 oldies = oldGradients.Load(int3(idx, 0));
    float4 oldOldies = oldOldGradients.Load(int3(idx, 0));

    float4 newState = float4(0., 0., 0., 0.);
    if (timeScheme == 0) {
        newState = in_state_here_UV + dt * d_by_dt;
    } else if (pred_or_corrector == 1) {
        newState = in_state_here_UV + dt / 12.0 * (23.0 * d_by_dt - 16.0 * oldies + 5.0 * oldOldies);
    } else if (pred_or_corrector == 2) {
        float4 predicted = predictedGradients.Load(int3(idx, 0));
        newState = in_state_here_UV + dt / 24.0 * (9.0 * d_by_dt + 19.0 * predicted - 5.0 * oldies + oldOldies);
    }

    if (abs(P_here.x) > 1.0) {
        newState.w = 1.0 * min(1, P_here.w / 5.0);
    }

    txNewState[id.xy] = newState;
    dU_by_dt[id.xy] = float4(d_by_dt);
    F_G_star[id.xy] = float4(0.0, 0.0, 0.0, 1.0);
    current_stateUVstar[id.xy] = newState;
}
